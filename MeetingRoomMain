import React, { useState, useEffect } from "react";
import styled , { keyframes } from "styled-components";



const allColors = ["#BEE7E8", "#FED3E2", "#FFD5A9", "#9EC4EA", "#FEFFBA", "#A9FBBB", "#ECDE62"];
const usedColors = new Set();

const getRandomColor = () => {
    let randomIndex, color;
    do {
        randomIndex = Math.floor(Math.random() * allColors.length);
        color = allColors[randomIndex];
    } while (usedColors.has(color));
    usedColors.add(color);
    return color;
};

const fakeData = Array.from({ length: 5 }, (_, id) => ({
    id: id + 1,
    name: ["달려라 뿅뿅뿅!!", "다함께 차차차!!", "좋은 사람 좋은 시간", "동네 친구 구함~", "강아지 산책하실분? 흐흐"][id],
    location: ["홍대", "건대", "신촌", "잠실", "여의도"][id],
    bgColor: getRandomColor()
}));



const MeetingRoomMain = () => {
  const [rooms, setRooms] = useState(fakeData);
  const [currentRoomIndex, setCurrentRoomIndex] = useState(0);
  const [isActive, setIsActive] = useState(false);
  const [buttonStates, setButtonStates] = useState({
    whole: false,
    distance: false,
    lastest: false,
    // 필요한 만큼 버튼 상태 추가
  });

  const toggleButton = (buttonKey) => {
    setButtonStates({
      whole: false,
      distance: false,
      lastest: false,
      [buttonKey]: !buttonStates[buttonKey]
    });
  };

  const handleNext = () => {
      setRooms(prev => [...prev.slice(1), prev[0]]);
      setCurrentRoomIndex(prev => (prev + 1) % rooms.length);
  };

  const handlePrev = () => {
    setRooms(prev => {
      const lastRoom = prev[prev.length - 1];
      return [lastRoom, ...prev.slice(0, prev.length - 1)];
  });
  setCurrentRoomIndex(prev => (prev - 1 + rooms.length) % rooms.length);

};



  return (
    <MainContainer>
        <HeaderText>맞춤 Top5</HeaderText>
        <RecommendRoomContainer>
            <ArrowButton 
            onClick={handlePrev}
            style={{ visibility: currentRoomIndex > 0 ? 'visible' : 'hidden' }}>
            {'<'}
            </ArrowButton>
            <RoomsWrapper>
                {rooms.map((room, index) => (
                    <RecommendRoom 
                        key={room.id} 
                        bgColor={room.bgColor} 
                        isMultipleOf3={(index + 1) % 3 === 0}
                    >
                        <RoomName>{room.name}</RoomName>
                        <RoomLocation>{room.location}</RoomLocation>
                    </RecommendRoom>
                ))}
            </RoomsWrapper>
            <ArrowButton onClick={handleNext} 
            style={{ visibility: currentRoomIndex < rooms.length - 1 ? 'visible' : 'hidden'}}>
            {'>'}</ArrowButton>
        </RecommendRoomContainer>
        <SortContainer>
          <SortStateContainer>
            <SortText>정렬 상태</SortText>
            <SortingButtonWrapper>
              <SortingButton isActive={buttonStates.whole} 
                onClick={() => toggleButton('whole')}>
                전체
              </SortingButton>
              <SortingButton isActive={buttonStates.distance} 
                onClick={() => toggleButton('distance')}>               
                 거리순
              </SortingButton>
              <SortingButton isActive={buttonStates.lastest} 
                onClick={() => toggleButton('lastest')}>                
                최신순
              </SortingButton>
            </SortingButtonWrapper>
          </SortStateContainer>
        </SortContainer>
    </MainContainer>
  );
}


  export default MeetingRoomMain;

  const SortStateContainer = styled.div`
  width: 100%;
  height: 3.75rem;
  background: #F9F9F9;
  display: flex;
  flex-direction: row; // Change to row layout
  justify-content: center; // Center items horizontally
  align-items: center; // Center items vertically
  justify-content: space-between;
  padding-left: 1.81rem;
  position: relative;
  top:0.87rem;
`;


  const SortContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 0.87rem;
  width: 24.375rem;
`;

const SortingButton = styled.button`
  display: flex;
  justify-content: center;
  align-items: center;
  width: 4.125rem;
  height: 2rem;
  border-radius: 1.125rem;
  box-shadow: 4px 4px 22px 0px rgba(0, 0, 0, 0.15);
  margin-right: 10px;
  border: none;
  background-color: ${props => props.isActive ? 'black' : 'white'};
  color: ${props => props.isActive ? 'white' : 'black'};
  cursor: pointer;
`;


const SortingButtonWrapper = styled.div`
  display: flex;
  justify-content: center; // Center buttons within the wrapper
  align-items: center;
  padding-right: 1.37rem; // Add padding to push buttons to the right
`;


  const RoomsWrapper = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  /* 필요한 경우 추가 스타일링 */
`;


  const ArrowButton = styled.button`
  background-color: transparent;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  margin-top:-10rem
  
`;
  const MainContainer = styled.div`
  display: flex; /* Flexbox를 사용 */
  flex-direction: column; /* 요소들을 세로로 배치 */
  align-items: center; /* 가로 방향 중앙 정렬 */

  width: 100%;
  `;
  const SortText = styled.div`
  color: #414141;
  font-size: 1.125rem;
  font-weight: 700;
  padding-left: 1rem; // Add padding to align text to the left
  // Add some space between the header text and the buttons
`;
const HeaderText = styled.div`
color: #414141;
  font-size: 1.125rem;
  font-weight: 700;
  position: relative;
  left: -7.8rem;
  top:2rem;
  height: 5rem;
`;

  const RecommendRoomContainer = styled.div`
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  margin-top: 11rem;
  height: 100%;
`;
const RecommendRoom = styled.div`
  width: 19.5rem;
  height: 9.5625rem;
  font-size: 1.125rem;
  border-radius: 0.75rem;
  background-color: ${(props) => props.bgColor};
  padding: 10px;
  margin-top: -11rem;
  box-shadow: 4px 4px 22px 0px rgba(0, 0, 0, 0.09);
  position: relative;
  transform: ${(props) => props.isMultipleOf3 ? 'rotate(-5deg)' : 'none'};
  transition: transform 0.5s ease, margin-top 0.5s ease;
  z-index: ${(props) => props.index};
`;
  const RoomName = styled.div `
  font-weight: 700; 
  font-size: 1.125rem;
   color: #444444; 
   margin-top: 0.87rem; 
   margin-left: 0.63rem;
  `;
  const RoomLocation = styled.div `
  font-weight: 700; 
  color: #444444; 
  font-size: 0.6875rem;
   margin-top: 0.56rem; 
   margin-left: 0.63rem;
   `;
